{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red32\green32\blue32;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;\cssrgb\c16781\c16781\c16739;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 For the Project1, requirement of the assignment was to make students understand how TCP and UDP works and what is the \
difference in the implementation of these protocols. Also, through this assignment, we were supposed to learn how \
server and client communicate regardless of the protocol. Through refactoring and modularizing the code, we understood \
how to write clean and easily understandable code. Since, this project required only single threaded server, it was \
intended for us to focus on implementation of 1 request at a time and handle various scenarios such as malformed \
request and implementing timeout at client side when server doesn\'92t respond in given time. Creating client and server\
logs made sure that all the request and response messages are saved in human-readable form to read the status of the \
protocol messages.\
\
While carrying out this project, we faced multiple challenges, for example, while implementing timeout, earlier we\
tried implementing a thread for each request, but later we realized that java provides \'93setSoConnect\'94 functionality \
to assign timeout to the socket. Other than that, we learned a lot about java.net and java.io packages and exceptions \
that can be raised in certain scenarios. Also, handling packets in TCP and UDP was very different, and we had to handle\
malformed/out of order packets in UDP using checksums as request IDs which was not required in TCP, so handling the \
requests in different protocols was a challenge for us. Regarding logging, initially we thought of using 3rd party \
logging API, but we implemented our own logging logic and understood the basics of logging and creating timestamps for\
each log and message in a text file. We maintained a list of negative edge cases, like server not connected, malformed\
package etc. and made sure our client and server are robust to all major failures. Finally, we also made sure while\
implementing, we modularized and documented the code to make it readable and extendable.\
\
One use case of such a single threaded server client application could be a \'93web server\'94 which can be used to handle\
HTTP requests. One application where such a web server can be used is a \'93financial trading systems\'94 where there is \
one server to handle the trade and market data requests of clients to ensure timely and accurate transactions.}